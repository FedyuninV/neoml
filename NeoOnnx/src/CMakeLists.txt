include(FindProtobuf)

set(PROTO_SRCS proto/onnx.pb.cc)
set(PROTO_HDRS proto/onnx.pb.h)

if(NeoOnnx_BUILD_SHARED)
add_library(${PROJECT_NAME} SHARED common.cpp)
else()
add_library(${PROJECT_NAME} STATIC common.cpp)
endif()

target_sources( ${PROJECT_NAME} PRIVATE
    ${PROTO_SRCS}
    DnnBuilder.cpp
    NeoOnnx.cpp
    Node.cpp
    NodeAttributes.cpp
    Nodes/AddNode.cpp
    Nodes/AveragePoolNode.cpp
    Nodes/BatchNormalizationNode.cpp
    Nodes/ClipNode.cpp
    Nodes/ConcatNode.cpp
    Nodes/ConstantNode.cpp
    Nodes/ConstantOfShapeNode.cpp
    Nodes/ConvNode.cpp
    Nodes/FlattenNode.cpp
    Nodes/GatherNode.cpp
    Nodes/GemmNode.cpp
    Nodes/GlobalAveragePoolNode.cpp
    Nodes/GraphInput.cpp
    Nodes/GraphInitializer.cpp
    Nodes/GraphOutput.cpp
    Nodes/LstmNode.cpp
    Nodes/MaxPoolNode.cpp
    Nodes/ReduceMeanNode.cpp
    Nodes/ReluNode.cpp
    Nodes/ShapeNode.cpp
    Nodes/SliceNode.cpp
    Nodes/SqueezeNode.cpp
    Nodes/TanhNode.cpp
    Nodes/UnsqueezeNode.cpp
    NodeUtils.cpp

    ${PROTO_HDRS}
    ../include/NeoOnnx/NeoOnnx.h
    ../include/NeoOnnx/NeoOnnxDefs.h
    DnnBuilder.h
    NeoOnnxCheck.h
    Node.h
    NodeAttributes.h
    Nodes/AddNode.h
    Nodes/AveragePoolNode.h
    Nodes/BatchNormalizationNode.h
    Nodes/ClipNode.h
    Nodes/ConcatNode.h
    Nodes/ConstantNode.h
    Nodes/ConstantOfShapeNode.h
    Nodes/ConvNode.h
    Nodes/FlattenNode.h
    Nodes/GatherNode.h
    Nodes/GemmNode.h
    Nodes/GlobalAveragePoolNode.h
    Nodes/GraphInput.h
    Nodes/GraphInitializer.h
    Nodes/GraphOutput.h
    Nodes/LstmNode.h
    Nodes/MaxPoolNode.h
    Nodes/ReduceMeanNode.h
    Nodes/ReluNode.h
    Nodes/ShapeNode.h
    Nodes/SliceNode.h
    Nodes/SqueezeNode.h
    Nodes/TanhNode.h
    Nodes/UnsqueezeNode.h
    NodeUtils.h
    Tensor.h
    TensorUtils.h
)

if(MSVC)
    # Because of the code generated by protobuf
    if(USE_FINE_OBJECTS)
        target_compile_options(${PROJECT_NAME} PRIVATE /wd4946)
    endif()
    target_compile_options(${PROJECT_NAME} PRIVATE /W2)
elseif(NOT WIN32)
    set_property(SOURCE ${PROTO_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -Wno-pedantic ")
    if(USE_FINE_OBJECTS)
        target_compile_options(${PROJECT_NAME} PRIVATE -Wno-nonportable-include-path)
    endif()
endif()

target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        ${PROTOBUF_INCLUDE_DIRS}
)

target_compile_definitions(${PROJECT_NAME} PRIVATE BUILD_NEOONNX)
if(NOT NeoOnnx_BUILD_SHARED)
    target_compile_definitions(${PROJECT_NAME} PUBLIC STATIC_NEOONNX)
endif()

string(TOUPPER ${CMAKE_SYSTEM_NAME} UPPERCASE_CMAKE_SYSTEM_NAME)
target_compile_definitions(${PROJECT_NAME} PUBLIC _${UPPERCASE_CMAKE_SYSTEM_NAME})

set_property(TARGET ${PROJECT_NAME} PROPERTY
    MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")

if(USE_FINE_OBJECTS)
    target_link_libraries(${PROJECT_NAME} PRIVATE libprotobuf NeoMathEngine NeoML FineObjects)
else()
    target_link_libraries(${PROJECT_NAME} libprotobuf NeoMathEngine NeoML FineObjLite)
    target_include_directories(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/>)
endif()

if(WIN32)
    if(USE_FINE_OBJECTS)
        target_include_directories(${PROJECT_NAME} PRIVATE
            $<BUILD_INTERFACE:$<$<COMPILE_LANGUAGE:RC>:${CMAKE_CURRENT_SOURCE_DIR}/../../../Build/Inc ${FINE_ROOT}/FineObjects ${MESSAGES_DIR}>>
        )
    else()
        target_include_directories(${PROJECT_NAME} PRIVATE 
            $<BUILD_INTERFACE:$<$<COMPILE_LANGUAGE:RC>:${CMAKE_CURRENT_SOURCE_DIR}/../../Build/Inc>>
        )
    endif()
    
    enable_language(RC)
    target_sources(${PROJECT_NAME} PRIVATE ../NeoOnnx.rc)
endif()

configure_target(${PROJECT_NAME})

if(NeoOnnx_INSTALL)
    if(USE_FINE_OBJECTS)
        fine_unexport_symbols(${PROJECT_NAME})
        fine_install(TARGETS NeoOnnx NeoML NeoMathEngine)
    else()
        install(
            TARGETS NeoOnnx NeoML FineObjLite NeoMathEngine
            EXPORT NeoOnnxConfig 
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR}
        )

        install(DIRECTORY ../include/NeoOnnx DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

        install(EXPORT NeoOnnxConfig
            NAMESPACE NeoOnnx::
            DESTINATION ${CMAKE_INSTALL_PREFIX}/cmake
        )
    endif()
endif()
